# -*- coding: utf-8 -*-
"""galena.ai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NrkSEDRsPsG2mtW34krAcn42OfoS6Imo
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Embedding, Flatten, Input, Concatenate, Dense

data = pd.read_table('/content/drive/MyDrive/dataset/supermarket_train.tsv', '\t')

receipt_to_index = {}
item_to_index = {}

def create_interaction_matrix(data):
    receipt_to_index = {receipt_id: index for index, receipt_id in enumerate(data['receipt_id'].unique())}
    item_to_index = {item_id: index for index, item_id in enumerate(data['item_id'].unique())}

    num_receipts = len(receipt_to_index)
    num_items = len(item_to_index)
    interaction_matrix = np.zeros((num_receipts, num_items), dtype='float32')

    for index, row in data.iterrows():
        receipt_index = receipt_to_index[row['receipt_id']]
        item_index = item_to_index[row['item_id']]
        interaction_matrix[receipt_index, item_index] = 1.0

    return interaction_matrix

def create_item_quantity_array(data):
    item_quantity = []

    for index, row in data.iterrows():
        item_id = row['item_id']
        if item_id in item_to_index:
            item_index = item_to_index[item_id]
            quantity = row['quantity']
            item_quantity.append((item_index, quantity))

    return np.array(item_quantity)

def create_nbo_model(num_items):
    item_input = Input(shape=(1,), name='item_input')
    item_embedding = Embedding(input_dim=32, output_dim=32)(item_input)
    item_flatten = Flatten()(item_embedding)
    interaction_input = Input(shape=(num_items,), name='interaction_input')
    concat = Concatenate()([item_flatten, interaction_input])
    hidden_layer = Dense(64, activation='relu')(concat)
    output = Dense(1, activation='linear', name='output')(hidden_layer)

    model = keras.Model(inputs=[item_input, interaction_input], outputs=output)
    model.compile(optimizer='adam', loss='mean_squared_error')

    return model

interaction_matrix = create_interaction_matrix(data)
item_quantity_array = create_item_quantity_array(data)

model = create_nbo_model(len(item_to_index))

model.fit([interaction_matrix[:, 0], item_quantity_array], interaction_matrix[:, 1], epochs=10, batch_size=32, validation_split=0.2)